Status game_reader_load_objects(Game *game, char *filename)
{
    FILE *file = NULL;
    char line[WORD_SIZE] = "";
    char name[WORD_SIZE] = "";
    Id id = NO_ID;
    Object *object = NULL;
    char *toks = NULL;

    /*Checks the arguments.*/
    if (!game || !filename)
    {
        return ERROR;
    }

    /*Opens the file.*/
    if (!(file = fopen(filename, "r")))
    {
        return ERROR;
    }

    /*Gets the data line by line.*/
    while (fgets(line, WORD_SIZE, file))
    {
        /*Checks that the line contains a room.*/
        if (strncmp("#o:", line, 3) == 0)
        {
            /*Takes the information data by data.*/
            toks = strtok(line + 3, "|");
            id = atol(toks);
            toks = strtok(NULL, "|");
            strcpy(name, toks);

            /*Creates an object and saves the data.*/
            object = object_create(id);
            /*Checks that the memory allocacion took place.*/
            if (!object)
            {
                return ERROR;
            }
            object_set_name(object, name);
            game_add_object(game, object);
        }
    }
    /*Close the file.*/
    fclose(file);

    /*Clean exit.*/
    return OK;
}

/**
 * @brief Loads all the objects from the data file.
 * @author Saúl López Romero
 *
 * @param game Pointer to the game structure, where all the information related to game is included.
 * @param filename Name of the data file where the map is stored.
 * @return OK for a clean exit, otherwise ERROR.
 */
Status game_reader_load_objects(Game *game, char *filename);

----------------------------------------------------------------------------------------------------------------

Status game_add_object(Game *game, Object *object)
{
    /*Checks the arguments.*/
    if (!game || !object || game->n_objects > MAX_OBJECTS)
    {
        return ERROR;
    }

    /*Adds the object.*/
    game->objects[game->n_objects] = object;
    game->n_objects++;

    /*Clean exit.*/
    return OK;
}

/**
 * @brief adds an object to the game structure.
 * @author Saúl López Romero
 *
 * @param game game structure, where all the information related to game is included.
 * @param object Pointer to the object to be added.
 * @return OK for a clean exit, otherwise ERROR.
 */
Status game_add_object(Game *game, Object *object);
